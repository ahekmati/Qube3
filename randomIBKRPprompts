from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.scanner import ScannerSubscription
from ibapi.tag_value import TagValue
import threading
import time

class IBKRScanner(EWrapper, EClient):
    def __init__(self):
        EClient.__init__(self, self)
        self.found = []

    def scannerData(self, reqId, rank, contractDetails, distance, benchmark, projection, legsStr):
        symbol = contractDetails.contract.symbol
        name = contractDetails.longName
        exch = contractDetails.contract.exchange
        self.found.append((rank, symbol, name, exch))

    def scannerDataEnd(self, reqId):
        print("\nScan complete. Found:")
        for row in self.found:
            print(f"{row[0]}: {row[1]} - {row[2]} ({row[3]})")
        self.disconnect()

def run_scanner():
    app = IBKRScanner()
    app.connect('127.0.0.1', 4001, 99)  # Use 4001 for IB Gateway
    thread = threading.Thread(target=app.run, daemon=True)
    thread.start()
    time.sleep(1)

    sub = ScannerSubscription()
    sub.instrument = "STK"
    sub.locationCode = "STK.US.MAJOR"
    sub.scanCode = "TOP_OPEN_PERC_GAIN"  # or "HOT_BY_VOLUME" for high volume stocks

    scan_options = []  # Custom scan options or leave empty
    filter_options = [
        TagValue("volumeAbove", "100000"),
        TagValue("priceAbove", "3"),  # Avoid penny stocks
    ]
    app.reqScannerSubscription(700, sub, scan_options, filter_options)
    time.sleep(10)  # Wait for data; adjust time as needed
    app.cancelScannerSubscription(700)
    app.disconnect()

if __name__ == "__main__":
    run_scanner()
